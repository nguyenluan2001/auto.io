generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id        Int      @id @default(autoincrement())
  uuid      String?
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  columns   Column[]
  rows      Row[]
  workflows      Workflows[]
  userId   Int?
  user     Users?    @relation(fields: [userId], references: [id])
}

model Users {
  id        Int      @id @default(autoincrement())
  uuid      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username      String?   @db.VarChar(255)
  email      String   @db.VarChar(255)
  password      String   @db.VarChar(255)
  provider      String   @db.VarChar(255)
  workflows      Workflows[]
  tables      Table[]
  schedules      Schedule[]
}
model Workflows {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  published   Boolean  @default(false)
  config      Json     @default("{}")
  edges      Json     @default("[]")
  nodes      Json     @default("[]")
  flows      Json     @default("[]")
  name        String   @db.VarChar(255)
  uuid        String?
  tableId   Int?
  table     Table?    @relation(fields: [tableId], references: [id])
  userId   Int?
  user     Users?    @relation(fields: [userId], references: [id])
  processes Process[]
  schedules Schedule[]
}


model Column {
  id        Int      @id @default(autoincrement())
  uuid      String?
  name      String   @db.VarChar(255)
  data_type String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tableId   Int
  table     Table    @relation(fields: [tableId], references: [id])
}

model Row {
  id        Int      @id @default(autoincrement())
  uuid      String?
  data      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tableId   Int
  table     Table    @relation(fields: [tableId], references: [id])
}

model Process {
  id        Int      @id @default(autoincrement())
  uuid      String
  pid      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workflowId   Int
  workflow     Workflows    @relation(fields: [workflowId], references: [id])
  status  ProcessStatus @default(RUNNING)
  duration Int @default(0)
}

enum ProcessStatus {
  SUCCESS
  FAILED
  CANCELED
  RUNNING
}


model Schedule {
  id        Int      @id @default(autoincrement())
  uuid      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workflowId   Int
  workflow     Workflows    @relation(fields: [workflowId], references: [id])
  userId   Int
  user     Users    @relation(fields: [userId], references: [id])
  status  ScheduleStatus @default(ACTIVE)
  triggers Trigger[]
}
enum ScheduleStatus {
  ACTIVE
  INACTIVE
}


model Trigger {
  id        Int      @id @default(autoincrement())
  uuid      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  is_active Boolean @default(true)
  interval Int? @default(0)
  delay Int? @default(0)
  last_timestamp DateTime? @default(now())
  expression String? @default("")
  date DateTime? @default(now())
  next_run DateTime? 
  type TriggerType 
  scheduleId   Int
  schedule     Schedule    @relation(fields: [scheduleId], references: [id])
}
enum TriggerType {
  INTERVAL
  CRON_JOB
  ON_A_SPECIFIC_DATE
}

